# R Shiny ----
tweaks <-
    list(tags$head(tags$style(
        HTML(
            "
                                 .multicol1 {
                                   height: 500px;
                                   -webkit-column-count: 5; /* Chrome, Safari, Opera */
                                   -moz-column-count: 5;    /* Firefox */
                                   column-count: 6;
                                   -moz-column-fill: auto;
                                   -column-fill: auto;
                                 };
                                 .multicol2 {
                                   height: 200px;
                                   -webkit-column-count: 1; /* Chrome, Safari, Opera */
                                   -moz-column-count: 1;    /* Firefox */
                                   column-count: 1;
                                   -moz-column-fill: auto;
                                   -column-fill: auto;
                                 }
                                 "
        )
    )))

# Get ticker names
eqnames = sort(colnames(eq_dd))
finames = sort(colnames(fi_dd))
comnames = sort(colnames(com_dd))

names = colnames(all_dd[,!(names(all_dd) %in% c("date"))])
names = sort(names)

# Create check boxes
controls = list(
    h3("Tickers:"),
    tags$div(
        align = 'left',
        class = 'multicol1',
        checkboxGroupInput(
            inputId  = 'tSelector1',
            label    = "Equities:",
            choices  = eqnames,
            selected = c(
                "AMZN",
                "ALB",
                "AMAT",
                "NKE",
                "BBY",
                "BSX",
                "CMG",
                "COST",
                "DPZ",
                "EA",
                "EXAS",
                "EOG",
                "IBM",
                "GILD",
                "INTC",
                "JNPR",
                "MPC",
                "TAK",
                "TSLA",
                "XLNX",
                "VZ",
                "VALE",
                "TWOU",
                "WMT",
                "HUM",
                "ALB",
                "MAT",
                "PEP",
                "PLD",
                "CVS"
            ),
            inline   = TRUE
        )
    ),
    tags$div(
        align = 'left',
        class = 'multicol2',
        checkboxGroupInput(
            inputId  = 'tSelector2',
            label    = "Fixed Income:",
            choices  = finames,
            selected = c("JNK", "TIP"),
            inline   = TRUE
        )
    ),
    tags$div(
        align = 'left',
        class = 'multicol2',
        checkboxGroupInput(
            inputId  = 'tSelector3',
            label    = "Commodities:",
            choices  = comnames,
            selected = c("GLD"),
            inline   = TRUE
        )
    )
    
)

ui <- fluidPage(
    tags$head(tags$style(type = "text/css", ".irs {max-width: 1500px;}")),
    titlePanel("Assets Correlation Graph"),
    tweaks,
    sidebarLayout(
        sidebarPanel(
            fluidRow(column(width = 12, controls),),
            sliderInput(
                "slider",
                "Time",
                min = as.Date("2007-01-01", "%Y-%m-%d"),
                max = as.Date("2021-01-04", "%Y-%m-%d"),
                value = as.Date("2014-05-13", timeFormat = "%Y-%m-%d"),
                step = 1,
                animate = TRUE,
                width = 1000
            )
        ),
        
        mainPanel(plotOutput(
            "clPlot", width = 1000, height = 900
        ),)
    )
)

server <- shinyServer(function(input, output, session) {
    set.seed(123)
    plot_data <- reactive(input$tSelector1)
    plot_data <- reactive(input$tSelector2)
    plot_data <- reactive(input$tSelector3)
    
    output$SliderText <- renderText({
        input$slider
    })
    
    currentFib <- reactive({
        if (length(c(input$tSelector1, input$tSelector2, input$tSelector3)) < 2) {
            p = "Choose at least 4 assets"
            
        } else {
            # take data for the selected tickers only
            selected = all_dd
            selected = selected[, c(input$tSelector1,
                                    input$tSelector2,
                                    input$tSelector3,
                                    'date')]
            
            inp = c(input$tSelector1,
                    input$tSelector2,
                    input$tSelector3)
            dateinp = input$slider
            temp = as.data.frame(test_cc[as.character(dateinp)])
            
            colnames(temp) = rownames(temp)
            temp = temp[, inp]
            
            sel_cc = data.frame()
            
            for (i in inp) {
                sel = data.frame(temp[i, ])
                sel_cc = rbind(sel_cc, sel)
            }
            
            # filter
            inpdate = input$slider
            daydata = selected %>%
                filter(selected$date == inpdate)
            
            if ((sum(is.na(daydata) == FALSE)) == 1) {
                inpdate = as.Date(input$slider) - 3
                daydata = selected %>%
                    filter(selected$date == inpdate)
            }
            
            torem = which(colSums(is.na(daydata)) > 0)
            if (length(torem) > 0) {
                sel_cc = sel_cc[-torem, -torem]
                rr = rr[, -torem]
            }
            
            if (length(sel_cc) > 1) {
                # Extract correlations only above the main diagonal
                ww = list()
                n = nrow(sel_cc) - 1
                for (i in 1:n) {
                    ww[[i]] = sel_cc[-c(1:i), i]
                }
                ww = unlist(ww) # vector of all correlations
                
                # Graph theory application
                g = graph.full(length(sel_cc),
                               directed = F,
                               loops = F)
                V(g)$name = colnames(sel_cc)
                V(g)$color = "#A8C3F6"
                
                E(g) # all possible connections
                
                # Set threshold - plot connections with cor higher than 0.3
                thr = 0.3
                wwt = ifelse(abs(ww) < thr, 0, ww)
                E(g)$weight = wwt
                
                E(g)[weight >= 0.7]$width = 3
                E(g)[weight >= 0.7]$color = "black"
                E(g)[weight <= -0.3]$color = "brown3"
                E(g)[weight <= -0.3]$width = 3
                E(g)[weight > -0.3 & weight < 0.7]$width = 0.5
                E(g)[weight > -0.3 & weight < 0.7]$color = "grey"
                
                plot(
                    g,
                    layout = layout.fruchterman.reingold,
                    vertex.color = "bisque2",
                    vertex.label = V(g)$number,
                    vertex.frame.color = "bisque2",
                    vertex.label.color = "black",
                    vertex.size = 12,
                    vertex.label.cex = 1,
                    vertex.label.family = "Helvetica",
                    vertex.label.font = 2
                )
            }
            
            
        }
    })
    
    
    set.seed(123)
    output$plot <- renderPlot(plot(
        x = plot_data(),
        y = plot_data(),
        pch = 7,
        cex = 2,
        xlim = c(1, 25),
        ylim = c(1, 25)
    ))
    
    output$clPlot <- renderPlot({
        set.seed(123)
        currentFib()
        
    })
})


shinyApp(ui = ui, server = server)
